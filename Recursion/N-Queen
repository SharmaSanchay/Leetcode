// Leetcode -> (51) Backtracking
class Solution {
public:
    vector<vector<string>>result;
    int N;
    bool isvalid(vector<string>&board,int row,int col){
        // checking column wise
        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }
     //check left diagonal upwards
        for(int i=row-1,j=col-1;i>=0 && j>=0 ; i--,j--){
             if(board[i][j]=='Q'){
                return false;
            }
        }
         //check right diagonal upwards
        for(int i=row-1,j=col+1;i>=0 && j<N ; i--,j++){
             if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
    void solve(vector<string>&board,int row){
        if(row >=N){
            result.push_back(board);
            return;
        }
          /*
            place one queen at every row and check before placing
            in every directions where there is risk if being attackes
            i.e. up, diagonally because we are placing queens from
            top row to bottom row, so we need to check if we put a queen
            vertically up in some row or diagonally upwards in some row
        */
        for(int col=0;col<N;col++){
            if(isvalid(board,row,col)){
                board[row][col] = 'Q';
                solve(board,row+1);
                board[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
         N = n;
        vector<string> board(n, string(n, '.')); 
        solve(board,0);
        return result;
    }
};
//Time Complexity : O(N!) - Read the reason above
//Space Complexity : O(N) to store the result
