// leetcode -> 1942 The Number of the Smallest Unoccupied Chair   (priority queue)
class Solution {
public:
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        int n = times.size();
        int targetArrival = times[targetFriend][0];
        vector<int> chairs(n); // To keep track of chair assignment
        iota(chairs.begin(), chairs.end(), 0); // Initialize with 0 to n-1

        // Sort times based on arrival time
        sort(times.begin(), times.end(),
             [](const vector<int>& a, const vector<int>& b) {
                 return a[0] < b[0];
             });

        priority_queue<int, vector<int>, greater<int>> availableChairs;
        for (int i = 0; i < n; ++i) {
            availableChairs.push(i);
        }

        // Use a min-heap to keep track of when chairs get free
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> leaving;
        for (int i = 0; i < n; ++i) {
            while (!leaving.empty() && leaving.top().first <= times[i][0]) {
                availableChairs.push(leaving.top().second);
                leaving.pop();
            }
            if (times[i][0] == targetArrival) {
                return availableChairs.top();
            }
            leaving.push({times[i][1], availableChairs.top()});
            availableChairs.pop();
        }
        return -1; // This should never be reached
    }
};
/*
TIme complexity -> O(NlogN)
Space complexiy -> O(N);
*/
