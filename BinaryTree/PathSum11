// leetcode -> 113 path sum  (https://leetcode.com/problems/path-sum/description/)
class Solution {
public:
    void solve(TreeNode* root, vector<int>& ans, vector<vector<int>>& res, int target, int tempsum) {
        if (!root) return; // Base case: if the node is null, return

        tempsum += root->val; // Add the current node's value to the current sum
        ans.push_back(root->val); // Add the current node's value to the current path

        // Check if it's a leaf node and the current sum equals the target
        if (!root->left && !root->right && tempsum == target) {
            res.push_back(ans); // If so, add the current path to the result
        }

        // Recur for left and right subtrees
        solve(root->left, ans, res, target, tempsum);
        solve(root->right, ans, res, target, tempsum);

        // Backtrack: remove the current node's value from the path and subtract from the sum
        ans.pop_back();
        tempsum -= root->val;
    }

    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> ans;
        vector<vector<int>> res;
        solve(root, ans, res, targetSum, 0); // Start the recursion with initial sum 0
        return res;
    }
};
/*
Time Complexity ->O(N)
Space Complexity->O(N)
*/